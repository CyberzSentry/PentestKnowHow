#!/bin/python
import argparse
import os
import requests

sucurity_trails_url = "https://api.securitytrails.com/v1/history/{domain}/dns/{record}"


def process_response(response, output, cdn, domain, verbose):
    if 'records' in response:
        for record in response['records']:
            store = True
            if cdn:
                for org in record['organizations']:
                    org_lower = org.lower()
                    if "cloudflare" in org_lower or "akamai" in org_lower:
                        if verbose:
                            print(f"[-] Skipping due to org: {org}")
                        store = False
                        break
            if store:
                for value in record['values']:
                    if verbose:
                        print(f"[+] Discovered ip {value['ip']} for domain {domain}")
                        output.write(f"{domain},{value['ip']}\n")
    elif verbose:
        print(f"[-] No records for domain {domain}")
        
            


def download(args):
    headers= {"APIKEY": args.key, "Accept": "application/json"}
    with open(args.input, "r") as inf:
        with open(args.output, "w") as outf:
            for line in inf:
                for record in ['a', 'aaaa']:
                    domain = line.strip()
                    r = requests.get(sucurity_trails_url.format(domain=domain, record="a"), headers=headers)
                    if r.status_code != 200 and args.verbose:
                        print(f'[-] Status code: {r.status_code}, Response:{r.text}')
                    else:
                        rj = r.json()
                        process_response(rj, outf, args.filtercdns, domain, args.verbose)
                        if rj['pages'] > 1:
                            for x in range(2, rj['pages'] + 1):
                                r = requests.get(sucurity_trails_url.format(domain=domain, record="a")+f"?page={x}", headers=headers)
                                rj = r.json()
                                process_response(rj, outf, args.filtercdns, domain, args.verbose)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        prog="SecurityTrails-historical-IPs",
        description="This program downloads historical IPs for each domain provided in the input file.",
        epilog="Developed by m0rt - https://github.com/maxDoesHacking/PentestKnowHow"
    )
    parser.add_argument("input", help="List of domains separated by new line.")
    parser.add_argument("-o", "--output", required=False, help="Output csv file")
    parser.add_argument("-k", "--key", required=True, help="SecurityTrails API key")
    parser.add_argument("-cdn", "--filtercdns",action='store_true', required=False, help="Filter out IPs belonging to CDNs")
    parser.add_argument("-v", "--verbose", action='store_true', default=False, help="Verbose")

    args = parser.parse_args()

    if args.output == None:
        output: str = os.path.basename(args.input) + ".csv"
        args.output = os.path.join(os.path.dirname(args.input), output)

    download(args)
